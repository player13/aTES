debug: true

server:
  port: 8081

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/task
    username: task_user
    password: task_password
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://localhost:9091
        auto.register.schema: false
        use.latest.version: true
        schema.reflection: true
        value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
    consumer:
      group-id: task-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.UUIDDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://localhost:9091
        auto.register.schema: false
        use.latest.version: true
        schema.reflection: true
        value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
        specific.avro.reader: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080
          jwk-set-uri: http://localhost:8080/oauth2/jwks
          audiences: task-client

springdoc:
  swagger-ui:
    oauth:
      client-id: task-client
      authorization-url: http://localhost:8080/oauth2/authorize
      token-url: http://localhost:8080/oauth2/token
      refresh-url: http://localhost:8080/oauth2/refresh

event:
  user:
    streaming: user-stream
    business: user-lifecycle
  task:
    streaming: task-stream
    business: task-lifecycle
